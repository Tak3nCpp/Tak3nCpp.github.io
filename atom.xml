<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Tak3n's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://tak3ncpp.github.io/"/>
  <updated>2015-08-31T09:01:32.343Z</updated>
  <id>http://tak3ncpp.github.io/</id>
  
  <author>
    <name><![CDATA[Tak3n]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[uva 712]]></title>
    <link href="http://tak3ncpp.github.io/2015/08/29/uva%20712/"/>
    <id>http://tak3ncpp.github.io/2015/08/29/uva 712/</id>
    <published>2015-08-29T07:30:34.000Z</published>
    <updated>2015-08-31T09:01:32.343Z</updated>
    <content type="html"><![CDATA[<p>《算法入门》P176 <a id="more"></a><br>很机智的题，先处理顺序，再把询问换成二进制k，直接输出下标为k的数。<br>又因为PE WA了，服。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> comment(linker, <span class="string">"/STACK:10240000000,10240000000"</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mec(x,y) memcpy(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug puts(<span class="string">"============"</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps <span class="number">1e-5</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp(x,y) make_pair(x,y)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf <span class="number">0x3f3f3f3f</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> NV <span class="number">150</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> nit int</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mian main</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ture true</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn <span class="number">100</span>+<span class="number">4</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> sf(x) scanf(<span class="string">"%d"</span>,&amp;x)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> sff(x,y) scanf(<span class="string">"%d%d"</span>,&amp;x,&amp;y)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> sfff(x,y,z) scanf(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> NE <span class="number">3000</span></span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> tree[<span class="number">3000</span>];</span><br><span class="line"><span class="keyword">int</span> order[<span class="number">3000</span>],a[<span class="number">3000</span>];</span><br><span class="line"><span class="keyword">int</span> q[<span class="number">3000</span>],r[<span class="number">3000</span>];</span><br><span class="line"><span class="keyword">int</span> res[<span class="number">3000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cas=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(sf(n),n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">500</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">            order[i]=atol(s+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;n);i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        sf(m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;m;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;q[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                r[i]=q[order[i]];</span><br><span class="line">            <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                ans+=r[i];</span><br><span class="line">                ans*=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans/=<span class="number">2</span>;</span><br><span class="line">            res[k]=a[ans];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"S-Tree #%d:\n"</span>,++cas);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="built_in">printf</span>(<span class="string">"%d"</span>,res[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>《算法入门》P176]]>
    
    </summary>
    
      <category term="数据结构" scheme="http://tak3ncpp.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="ACM" scheme="http://tak3ncpp.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[uva 10410]]></title>
    <link href="http://tak3ncpp.github.io/2015/08/29/uva%2010410/"/>
    <id>http://tak3ncpp.github.io/2015/08/29/uva 10410/</id>
    <published>2015-08-29T03:30:34.000Z</published>
    <updated>2015-08-31T08:18:55.453Z</updated>
    <content type="html"><![CDATA[<p>《算法入门》P180  <a id="more"></a><br>写得巨丑。<br>构造思想是，如果在dfs序列中相邻两个数，在bfs序列中前者和后者位置的差值大于1（考虑到树根的特殊情况），那么后者一定是前者的子节点。所有不满足这个条件的数的父节点一定是在bfs数列中它前面一个数的父节点。<br>1A的代码：  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> sf(x) scanf(<span class="string">"%d"</span>,&amp;x)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> sff(x,y) scanf(<span class="string">"%d%d"</span>,&amp;x,&amp;y)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> sfff(x,y,z) scanf(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> comment(linker, <span class="string">"/STACK:10240000000,10240000000"</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mec(x,y) memcpy(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug puts(<span class="string">"------------"</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp(x,y) make_pair(x,y)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf <span class="number">0x3f3f3f3f</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps  <span class="number">1e-5</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mian main</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ture true</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> nit int</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> NV <span class="number">150</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> NE <span class="number">3000</span></span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">1010</span>],d[<span class="number">1010</span>],pb[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> son[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~sf(n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            sf(b[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            pb[b[i]]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            sf(d[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            fa[i]=i,son[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pb[d[i-<span class="number">1</span>]]&lt;pb[d[i]]-<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                fa[d[i]]=d[i-<span class="number">1</span>];</span><br><span class="line">               son[d[i-<span class="number">1</span>]][++son[d[i-<span class="number">1</span>]][<span class="number">0</span>]]=d[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(fa[b[i]]==b[i])</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">int</span> x=fa[b[i-<span class="number">1</span>]];</span><br><span class="line">                fa[b[i]]=x;</span><br><span class="line">               son[x][++son[x][<span class="number">0</span>]]=b[i];</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d:"</span>,i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=son[i][<span class="number">0</span>];j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" %d"</span>,son[i][j]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span><br><span class="line">8</span><br><span class="line">4 3 5 1 2 8 7 6</span><br><span class="line">4 3 1 7 2 6 5 8</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<p><em>EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>《算法入门》P180]]>
    
    </summary>
    
      <category term="数据结构" scheme="http://tak3ncpp.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="ACM" scheme="http://tak3ncpp.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[uva 439]]></title>
    <link href="http://tak3ncpp.github.io/2015/08/29/uva%20439/"/>
    <id>http://tak3ncpp.github.io/2015/08/29/uva 439/</id>
    <published>2015-08-29T03:30:34.000Z</published>
    <updated>2015-08-31T08:16:10.686Z</updated>
    <content type="html"><![CDATA[<p>《算法入门》P177  <a id="more"></a><br>和poj 2243一毛一样。然而。。。这个的时限是3000ms那个是1000ms，而且，当年Floyd的代码0ms过。这意味着什么？这意味着数据太弱，暴力乱过呀！我当年TLE的代码们终于以13ms的成绩从见天日了。 </p>
<p>方法一，赤裸裸的广搜：  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> comment(linker, <span class="string">"/STACK:10240000000,10240000000"</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf <span class="number">0x3ffffff</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mx <span class="number">1000004</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mec(x,y) memcpy(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps <span class="number">1e-5</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mod <span class="number">1000000007</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp(x,y) make_pair(x,y)</span></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> step[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cango</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;=<span class="number">1</span>&amp;&amp;x&lt;=<span class="number">8</span>&amp;&amp;y&gt;=<span class="number">1</span>&amp;&amp;y&lt;=<span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> X[]=&#123;-<span class="number">1</span>,-<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">2</span>&#125;,Y[]=&#123;-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s1[<span class="number">5</span>],s2[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1,s2))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"To get from %s to %s takes "</span>,s1,s2);</span><br><span class="line">        <span class="keyword">int</span> x1=s1[<span class="number">0</span>]-<span class="string">'a'</span>+<span class="number">1</span>,x2=s2[<span class="number">0</span>]-<span class="string">'a'</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> y1=s1[<span class="number">1</span>]-<span class="string">'0'</span>,y2=s2[<span class="number">1</span>]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;q;</span><br><span class="line">        q.push(mp(x1,y1));</span><br><span class="line">        mem(vis,<span class="number">0</span>);</span><br><span class="line">        mem(step,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.front().first;</span><br><span class="line">            <span class="keyword">int</span> y=q.front().second;</span><br><span class="line">            q.pop();</span><br><span class="line">            vis[x][y]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x==x2&amp;&amp;y==y2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d knight moves.\n"</span>,step[x][y]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">                <span class="keyword">if</span>(cango(x+X[i],y+Y[i])&amp;&amp;!vis[x+X[i]][y+Y[i]])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(mp(x+X[i],y+Y[i]));</span><br><span class="line">                    step[x+X[i]][y+Y[i]]=step[x][y]+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二，避免重复的广搜：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn <span class="number">50008</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxe <span class="number">400008</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf <span class="number">0x3f3f3f3f</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp(x,y) make_pair(x,y)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> step[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cango</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;=<span class="number">1</span>&amp;&amp;x&lt;=<span class="number">8</span>&amp;&amp;y&gt;=<span class="number">1</span>&amp;&amp;y&lt;=<span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> X[]=&#123;-<span class="number">1</span>,-<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">2</span>&#125;,Y[]=&#123;-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x1=<span class="number">1</span>;x1&lt;<span class="number">9</span>;x1++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x2=<span class="number">1</span>;x2&lt;<span class="number">9</span>;x2++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y1=<span class="number">1</span>;y1&lt;<span class="number">9</span>;y1++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y2=<span class="number">1</span>;y2&lt;<span class="number">9</span>;y2++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;q;</span><br><span class="line">        q.push(mp(x1,y1));</span><br><span class="line">        mem(vis,<span class="number">0</span>);</span><br><span class="line">        mem(step,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.front().first;</span><br><span class="line">            <span class="keyword">int</span> y=q.front().second;</span><br><span class="line">            q.pop();</span><br><span class="line">            vis[x][y]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x==x2&amp;&amp;y==y2)</span><br><span class="line">            &#123;</span><br><span class="line">                a[x1][y1][x2][y2]=step[x][y];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">                <span class="keyword">if</span>(cango(x+X[i],y+Y[i])&amp;&amp;!vis[x+X[i]][y+Y[i]])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(mp(x+X[i],y+Y[i]));</span><br><span class="line">                    step[x+X[i]][y+Y[i]]=step[x][y]+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">char</span> s1[<span class="number">5</span>],s2[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1,s2))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"To get from %s to %s takes "</span>,s1,s2);</span><br><span class="line">        <span class="keyword">int</span> x1=s1[<span class="number">0</span>]-<span class="string">'a'</span>+<span class="number">1</span>,x2=s2[<span class="number">0</span>]-<span class="string">'a'</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> y1=s1[<span class="number">1</span>]-<span class="string">'0'</span>,y2=s2[<span class="number">1</span>]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d knight moves.\n"</span>,a[x1][y1][x2][y2]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>《算法入门》P177]]>
    
    </summary>
    
      <category term="bfs" scheme="http://tak3ncpp.github.io/tags/bfs/"/>
    
      <category term="ACM" scheme="http://tak3ncpp.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[uva 514]]></title>
    <link href="http://tak3ncpp.github.io/2015/08/29/uva%20514/"/>
    <id>http://tak3ncpp.github.io/2015/08/29/uva 514/</id>
    <published>2015-08-29T00:30:34.000Z</published>
    <updated>2015-08-31T08:26:28.219Z</updated>
    <content type="html"><![CDATA[<p>《算法入门》P140<br>关于uva这个判题啊，我的内心是崩溃的，PE就判WA。<a id="more"></a> </p>
<p>我的想法：把出栈次序看成入栈次序，那么出栈就是固定的1-n,反向入栈，每个元素先入栈，再判断栈顶元素是否是应该出栈的元素。如果最后栈里还有元素，那么就是不合法序列。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> comment(linker, <span class="string">"/STACK:10240000000,10240000000"</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mec(x,y) memcpy(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug puts(<span class="string">"============"</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps <span class="number">1e-5</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp(x,y) make_pair(x,y)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf <span class="number">0x3f3f3f3f</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> NV <span class="number">150</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> nit int</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mian main</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ture true</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn <span class="number">100</span>+<span class="number">4</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> sf(x) scanf(<span class="string">"%d"</span>,&amp;x)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> sff(x,y) scanf(<span class="string">"%d%d"</span>,&amp;x,&amp;y)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> sfff(x,y,z) scanf(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> NE <span class="number">3000</span></span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> out[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(sf(n),n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(sf(out[<span class="number">1</span>]),out[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line">        <span class="keyword">int</span> j=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)sf(out[i]);</span><br><span class="line">        <span class="keyword">int</span> i=n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i--)</span><br><span class="line">        &#123;</span><br><span class="line">            s.push(out[i]);</span><br><span class="line">            <span class="keyword">while</span>(!s.empty()&amp;&amp;s.top()==j)s.pop(),j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s.empty())<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我的另一种想法，正向入栈。如果栈是空的，或者栈顶元素不是当前应出栈元素，那么就一直进栈，知道遇到应出栈元素或入栈截止。遇到应出栈元素后，跳过该元素的入栈，进入下一循环。仍然是判断栈是否为空来确定序列的合法性。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> out[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(sf(n),n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="keyword">while</span>(sf(t),t)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">        out[<span class="number">0</span>]=t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)sf(out[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.empty()||s.top()!=out[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(j!=out[i]&amp;&amp;j&lt;n)s.push(j++);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.top()==out[i])s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s.empty())<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Srbga用的是我的第二种方法，判断非法的原则是出栈截止之前还能否进行合法操作，合法操作有三：当前进栈等于当前出栈，进栈++，出栈++；栈顶等于当前出栈，pop；非前两者，下一元素入栈。<br>因为其方法没我的优越，就不上代码了。</p>
<p>这种题，一般样例能过就能A。- -。不得不说，报个PE会死爹啊，我这两天每道uva的题都因为空行WA了。</p>
<p><em>EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>《算法入门》P140<br>关于uva这个判题啊，我的内心是崩溃的，PE就判WA。]]>
    
    </summary>
    
      <category term="STL" scheme="http://tak3ncpp.github.io/tags/STL/"/>
    
      <category term="ACM" scheme="http://tak3ncpp.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[poj 3723]]></title>
    <link href="http://tak3ncpp.github.io/2015/08/27/poj%203723/"/>
    <id>http://tak3ncpp.github.io/2015/08/27/poj 3723/</id>
    <published>2015-08-27T03:30:34.000Z</published>
    <updated>2015-08-31T07:49:27.460Z</updated>
    <content type="html"><![CDATA[<p>此题略神。它证明了kruskal有其存在的必要性。<a id="more"></a> </p>
<p>有n个女生，m个男生，其中每个人需要花费10000元。不过男生和女生之间有相互作用，可以降低费用。比如编号为1的女生和编号为1的男生之间有关系d，那么女生已经征兵结束后，男生只需10000-d即可入伍。<br>明显是最小生成树，然而我T了两发（没看懂题之前以为是二分图，2333）。原因在于我用的方法是prim+heap。<br>prim是基于点的搜索，所以一个大前提就是图是联通的。在图可能不连通的情况下，只有对没有访问过的所有点进行都搜索才能形成不连通图的多个最小生成树。因为kruskal是基于边的搜索，所以它的贪心法则不是从已生成图块向未加入树的图块遍历查找最小边，而是对每条当前最优选择边判断它的两端点的连通性，所以不连通问题能够一次性解决。<br>自行脑补头文件。</p>
<p>poj 2663：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> comment(linker, <span class="string">"/STACK:10240000000,10240000000"</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf <span class="number">0x3ffffff</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mec(x,y) memcpy(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug puts(<span class="string">"============"</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps <span class="number">1e-5</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp(x,y) make_pair(x,y)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> nit int</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mian main</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ture true</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn <span class="number">100</span>+<span class="number">4</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> sf(x) scanf(<span class="string">"%d"</span>,&amp;x)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> sff(x,y) scanf(<span class="string">"%d%d"</span>,&amp;x,&amp;y)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> sfff(x,y,z) scanf(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> NE <span class="number">2000000</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> NV <span class="number">10000</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mx=<span class="number">50010</span>;</span><br><span class="line"><span class="keyword">int</span> c[mx];</span><br><span class="line"><span class="keyword">int</span> len[mx],l[mx],r[mx],fa[mx];</span><br><span class="line"><span class="keyword">int</span> n,m,R;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf <span class="number">0xfffffff</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> len[x]&gt;len[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findf</span><span class="params">(<span class="keyword">int</span> x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==fa[x]?x:fa[x]=findf(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;R;i++)c[i]=i;</span><br><span class="line">    sort(c,c+R,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;R;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=c[i];</span><br><span class="line">        <span class="keyword">int</span> a=findf(l[t]),b=findf(r[t]);</span><br><span class="line">        <span class="keyword">if</span>(a!=b)</span><br><span class="line">            res+=len[t],fa[a]=b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10000</span>*(n+m)-res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        sfff(n,m,R);</span><br><span class="line">        <span class="keyword">int</span> x,y,z;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;R;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sfff(x,y,z);</span><br><span class="line">            l[i]=x,r[i]=y+n,len[i]=z;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kruskal());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>此题略神。它证明了kruskal有其存在的必要性。]]>
    
    </summary>
    
      <category term="MST" scheme="http://tak3ncpp.github.io/tags/MST/"/>
    
      <category term="kruskal" scheme="http://tak3ncpp.github.io/tags/kruskal/"/>
    
      <category term="ACM" scheme="http://tak3ncpp.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[poj 2663/3420]]></title>
    <link href="http://tak3ncpp.github.io/2015/08/25/poj%202663%203420/"/>
    <id>http://tak3ncpp.github.io/2015/08/25/poj 2663 3420/</id>
    <published>2015-08-25T03:30:34.000Z</published>
    <updated>2015-08-31T07:59:22.642Z</updated>
    <content type="html"><![CDATA[<p>骨牌覆盖问题。<img src="/img/MATRIX-problem.png" alt=""><a id="more"></a> </p>
<p><a href="http://www.matrix67.com/blog/archives/276" target="_blank" rel="external">matrix的博客</a>上有矩阵问题的很好的介绍，这个问题是矩阵十题最后一个问题，主要是要在验算清楚由n-1列骨牌到n列的递推关系。矩阵对于递推类问题有很稳健的表现，远胜DP.<br><img src="/img/MATRIX-solve.png" alt=""><br>下面给出当高度n=3和n=4时的解法,自行脑补头文件。</p>
<p>poj 2663：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">struct</span> matrix</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line">&#125;res,tmp;</span><br><span class="line"><span class="function">matrix <span class="title">multi</span><span class="params">(<span class="keyword">const</span> matrix &amp;x,<span class="keyword">const</span> matrix &amp;y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    mem(tmp.a,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">8</span>;j++)</span><br><span class="line">        <span class="keyword">if</span>(x.a[i][j])</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">8</span>;k++)</span><br><span class="line">        tmp.a[i][k]+=x.a[i][j]*y.a[j][k];</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">35</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    matrix a;</span><br><span class="line">    mem(a.a,<span class="number">0</span>);</span><br><span class="line">    a.a[<span class="number">6</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">5</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">4</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">7</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">3</span>][<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">2</span>][<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">1</span>][<span class="number">6</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">7</span>][<span class="number">6</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">0</span>][<span class="number">7</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">3</span>][<span class="number">7</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">6</span>][<span class="number">7</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">7</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    matrix res=a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">30</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i]=res.a[<span class="number">0</span>][<span class="number">7</span>];</span><br><span class="line">        res=multi(res,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),~n)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，可以删除中间没有必要的环游。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> matrix</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line">&#125;res,tmp;</span><br><span class="line"><span class="function">matrix <span class="title">multi</span><span class="params">(<span class="keyword">const</span> matrix &amp;x,<span class="keyword">const</span> matrix &amp;y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    mem(tmp.a,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)</span><br><span class="line">        <span class="keyword">if</span>(x.a[i][j])</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">6</span>;k++)</span><br><span class="line">        tmp.a[i][k]+=x.a[i][j]*y.a[j][k];</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">35</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    matrix a;</span><br><span class="line">    mem(a.a,<span class="number">0</span>);</span><br><span class="line">    a.a[<span class="number">4</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">3</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">5</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">1</span>][<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">5</span>][<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">0</span>][<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">2</span>][<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">4</span>][<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">5</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    matrix res=a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">30</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i]=res.a[<span class="number">0</span>][<span class="number">5</span>];</span><br><span class="line">        res=multi(res,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),~n)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>poj 3420：<br>n=4，poj 2663升级版，注意不用的边可以删除以缩小矩阵规模，可以有自环。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="keyword">int</span> mod;</span><br><span class="line"><span class="keyword">struct</span> matrix</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line">&#125;res,tmp;</span><br><span class="line"><span class="function">matrix <span class="title">multi</span><span class="params">(<span class="keyword">const</span> matrix &amp;x,<span class="keyword">const</span> matrix &amp;y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    mem(tmp.a,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)</span><br><span class="line">        <span class="keyword">if</span>(x.a[i][j])</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">6</span>;k++)</span><br><span class="line">        tmp.a[i][k]=(tmp.a[i][k]+x.a[i][j]*y.a[j][k]%mod)%mod;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">qmod</span><span class="params">(matrix a,<span class="keyword">int</span> k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    mem(res.a,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        res.a[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)res=multi(res,a);</span><br><span class="line">        a=multi(a,a);</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">35</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    matrix a;</span><br><span class="line">    mem(a.a,<span class="number">0</span>);</span><br><span class="line">    a.a[<span class="number">4</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">5</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">3</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">5</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">1</span>][<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">5</span>][<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">0</span>][<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">1</span>][<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">2</span>][<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">4</span>][<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">5</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">5</span>][<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;k,&amp;mod),k)</span><br><span class="line">    &#123;</span><br><span class="line">        matrix ans=qmod(a,k+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> res=ans.a[<span class="number">5</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>骨牌覆盖问题。<img src="/img/MATRIX-problem.png" alt="">]]>
    
    </summary>
    
      <category term="矩阵" scheme="http://tak3ncpp.github.io/tags/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="ACM" scheme="http://tak3ncpp.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[rqnoj 675]]></title>
    <link href="http://tak3ncpp.github.io/2015/08/23/rqnoj%20675/"/>
    <id>http://tak3ncpp.github.io/2015/08/23/rqnoj 675/</id>
    <published>2015-08-23T03:30:34.000Z</published>
    <updated>2015-08-31T07:49:11.380Z</updated>
    <content type="html"><![CDATA[<p>给一串正整数，玩家每次可以从右边取一个数或者从左边取一个数，分数为取得整数的和，每次策略最优。问先手最多多少分，后手最多多少分。<a id="more"></a> </p>
<p>博弈水题，主要是记忆化搜索。 </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span>//自行脑补头文件</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getw</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> ed)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st==ed)<span class="keyword">return</span> w[st][ed]=a[st];</span><br><span class="line">    <span class="keyword">if</span>(w[st][ed]!=-<span class="number">1</span>)<span class="keyword">return</span> w[st][ed];</span><br><span class="line">    <span class="keyword">int</span> a=getw(st+<span class="number">1</span>,ed),b=getw(st,ed-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> w[st][ed]=sum[ed]-sum[st-<span class="number">1</span>]-min(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    mem(w,-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    sum[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">        sum[i]=sum[i-<span class="number">1</span>]+a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res1=getw(<span class="number">1</span>,n),res2=sum[n]-res1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,res1,res2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>给一串正整数，玩家每次可以从右边取一个数或者从左边取一个数，分数为取得整数的和，每次策略最优。问先手最多多少分，后手最多多少分。]]>
    
    </summary>
    
      <category term="dp" scheme="http://tak3ncpp.github.io/tags/dp/"/>
    
      <category term="博弈" scheme="http://tak3ncpp.github.io/tags/%E5%8D%9A%E5%BC%88/"/>
    
      <category term="ACM" scheme="http://tak3ncpp.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[cf 263D]]></title>
    <link href="http://tak3ncpp.github.io/2015/08/22/cf%20263D/"/>
    <id>http://tak3ncpp.github.io/2015/08/22/cf 263D/</id>
    <published>2015-08-22T03:30:34.000Z</published>
    <updated>2015-08-31T07:50:06.650Z</updated>
    <content type="html"><![CDATA[<p>此题太坑。给出无向图，求此图上任意一个度大于k的环。<a id="more"></a><br>暴力的dfs，枚举每个点为树顶的环游，dep大于k时输出。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug puts(<span class="string">"-------"</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> NV <span class="number">300005</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> NE <span class="number">600005</span></span></span><br><span class="line"><span class="keyword">struct</span> edge&#123;<span class="keyword">int</span> v,next;&#125;e[NE];</span><br><span class="line"><span class="keyword">int</span> pre[NV],vis[NV];</span><br><span class="line"><span class="keyword">int</span> ecnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    mem(pre,-<span class="number">1</span>);</span><br><span class="line">    ecnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    e[ecnt].v=v;</span><br><span class="line">    e[ecnt].next=pre[u];</span><br><span class="line">    pre[u]=ecnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fl;</span><br><span class="line"><span class="keyword">int</span> ans[NE];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> dep)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dep);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=dep;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i],<span class="string">" \n"</span>[i==dep]);</span><br><span class="line">    fl=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k,now;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> dep)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fl)<span class="keyword">return</span>;</span><br><span class="line">    ans[dep]=u;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=pre[u];~i;i=e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v]&amp;&amp;v&gt;now)dfs(v,dep+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(v==now&amp;&amp;dep&gt;k)print(dep);</span><br><span class="line">        <span class="keyword">if</span>(fl)<span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        adde(u,v);</span><br><span class="line">        adde(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    fl=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mem(vis,<span class="number">0</span>);</span><br><span class="line">        now=i;</span><br><span class="line">        dfs(i,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(fl)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>此题太坑。给出无向图，求此图上任意一个度大于k的环。]]>
    
    </summary>
    
      <category term="dfs" scheme="http://tak3ncpp.github.io/tags/dfs/"/>
    
      <category term="gragh" scheme="http://tak3ncpp.github.io/tags/gragh/"/>
    
      <category term="ACM" scheme="http://tak3ncpp.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[poj 1548]]></title>
    <link href="http://tak3ncpp.github.io/2015/08/19/poj%201548/"/>
    <id>http://tak3ncpp.github.io/2015/08/19/poj 1548/</id>
    <published>2015-08-19T07:30:34.000Z</published>
    <updated>2015-08-31T08:57:01.528Z</updated>
    <content type="html"><![CDATA[<p>一道很机智的题。<img src="/img/poj1548.png" alt="">问最少有多少路径。 <a id="more"></a><br>设点的坐标为x,y,本题其实是找满足x1&lt;=x2&lt;=x3…且y1&lt;=y2&lt;=y3…..的最少序列。先排序其中之一，另外一边用贪心的思想暴力搞一搞。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> x[<span class="number">900</span>],y[<span class="number">900</span>],r[<span class="number">900</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x[a]==x[b])<span class="keyword">return</span> y[a]&lt;y[b];</span><br><span class="line">    <span class="keyword">return</span> x[a]&lt;x[b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">60</span>];<span class="comment">//队列尾元素的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">has</span><span class="params">(<span class="keyword">int</span> a)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">    <span class="keyword">if</span>(c[i])k=i;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b),~a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!a)</span><br><span class="line">        &#123;</span><br><span class="line">            sort(r,r+n,cmp);</span><br><span class="line">            mem(c,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> e=y[r[i]];</span><br><span class="line">                <span class="keyword">int</span> t=has(e);</span><br><span class="line">                <span class="keyword">if</span>(!t)</span><br><span class="line">                &#123;</span><br><span class="line">                    c[e]++,cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> c[t]--,c[e]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">            n=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x[n]=a,y[n]=b;</span><br><span class="line">            r[n]=n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一道很机智的题。<img src="/img/poj1548.png" alt="">问最少有多少路径。]]>
    
    </summary>
    
      <category term="sort" scheme="http://tak3ncpp.github.io/tags/sort/"/>
    
      <category term="机智题" scheme="http://tak3ncpp.github.io/tags/%E6%9C%BA%E6%99%BA%E9%A2%98/"/>
    
      <category term="ACM" scheme="http://tak3ncpp.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[cf 479E]]></title>
    <link href="http://tak3ncpp.github.io/2015/08/19/cf%20479E/"/>
    <id>http://tak3ncpp.github.io/2015/08/19/cf 479E/</id>
    <published>2015-08-19T07:30:34.000Z</published>
    <updated>2015-09-01T10:12:20.762Z</updated>
    <content type="html"><![CDATA[<p>有一栋高N层的楼，这栋楼里有个秘密实验室在B层，所以每次他移动的时候就有了一个限制，x为当前所在层，y为目标层，|x - y| &lt; |x - b|。问说移动K次后，有多少不同的路径。  <a id="more"></a> </p>
<p>经过分析可得出他移动的层数一定在b的同侧，dp[i][j]表示第i次坐电梯，距离b最小值为j的路径总数，那么可以得到状态转移方程：  </p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="link_label">i</span>][<span class="link_reference">j</span>]=dp[<span class="link_label">i</span>][<span class="link_reference">j+1</span>]+dp[<span class="link_label">i-1</span>][<span class="link_reference">j+1</span>];//距离为j的可由距离大于j的所有位置得到。  </span><br><span class="line"> if(j&gt;2)dp[<span class="link_label">i</span>][<span class="link_reference">j</span>]+=dp[<span class="link_label">i-1</span>][<span class="link_reference">(j+2)/2</span>]-dp[<span class="link_label">i-1</span>][<span class="link_reference">j</span>];//当j大于2时，还可由小于2的距离大于1/2 j小于 j的位置得到。</span><br><span class="line"></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>
<p>long long dp[5003][5003];<br>int main()<br>{<br>    int n,a,b,k;<br>    scanf(“%d%d%d%d”,&amp;n,&amp;a,&amp;b,&amp;k);<br>    if(a&gt;b)<br>    {<br>        b=n-b+1;<br>        a=n-a+1;<br>    }<br>            dp[0][b-a]=1;<br>        for(int i=b-a-1;i&gt;=1;i—)<br>            dp[0][i]=dp[0][i+1];<br>    for(int i=1;i&lt;=k;i++)<br>        for(int j=b-1;j&gt;=1;j—)<br>    {<br>        dp[i][j]=dp[i][j+1]+dp[i-1][j+1];<br>        if(j&gt;2)dp[i][j]+=dp[i-1][(j+2)/2]-dp[i-1][j];<br>        dp[i][j]=(dp[i][j]%mod+mod)%mod;<br>    }<br>    printf(“%d\n”,dp[k][1]);<br>}</p>
<p>```<br><em>EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有一栋高N层的楼，这栋楼里有个秘密实验室在B层，所以每次他移动的时候就有了一个限制，x为当前所在层，y为目标层，|x - y| &lt; |x - b|。问说移动K次后，有多少不同的路径。]]>
    
    </summary>
    
      <category term="dp" scheme="http://tak3ncpp.github.io/tags/dp/"/>
    
      <category term="ACM" scheme="http://tak3ncpp.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[poj 2243]]></title>
    <link href="http://tak3ncpp.github.io/2015/08/19/poj%202243/"/>
    <id>http://tak3ncpp.github.io/2015/08/19/poj 2243/</id>
    <published>2015-08-19T03:30:34.000Z</published>
    <updated>2015-08-31T08:59:24.186Z</updated>
    <content type="html"><![CDATA[<p> Floyd神题、<br>问棋盘上任意两点之间的象棋最少移动次数。询问量太大，不好用dfs.<a id="more"></a>  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn <span class="number">50008</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxe <span class="number">400008</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf <span class="number">0x3f3f3f3f</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mp(x,y) make_pair(x,y)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cango</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;=<span class="number">0</span>&amp;&amp;x&lt;<span class="number">8</span>&amp;&amp;y&gt;=<span class="number">0</span>&amp;&amp;y&lt;<span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> X[]=&#123;-<span class="number">1</span>,-<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">2</span>&#125;,Y[]=&#123;-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">80</span>][<span class="number">80</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">64</span>;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">64</span>;j++)</span><br><span class="line">    a[i][j]=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">64</span>;i++)</span><br><span class="line">        a[i][i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">64</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">8</span>;k++)</span><br><span class="line">                <span class="keyword">if</span>(cango(i/<span class="number">8</span>+X[k],i%<span class="number">8</span>+Y[k]))</span><br><span class="line">                a[i][(i/<span class="number">8</span>+X[k])*<span class="number">8</span>+i%<span class="number">8</span>+Y[k]]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">64</span>;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">64</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">64</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">           a[i][j]=min(a[i][j],a[i][k]+a[k][j]);</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">char</span> s1[<span class="number">5</span>],s2[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1,s2))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"To get from %s to %s takes "</span>,s1,s2);</span><br><span class="line">        <span class="keyword">int</span> x1=s1[<span class="number">0</span>]-<span class="string">'a'</span>,x2=s2[<span class="number">0</span>]-<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">int</span> y1=s1[<span class="number">1</span>]-<span class="string">'1'</span>,y2=s2[<span class="number">1</span>]-<span class="string">'1'</span>;</span><br><span class="line">        <span class="keyword">int</span> x=x1*<span class="number">8</span>+y1;</span><br><span class="line">        <span class="keyword">int</span> y=x2*<span class="number">8</span>+y2;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d knight moves.\n"</span>,a[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p> Floyd神题、<br>问棋盘上任意两点之间的象棋最少移动次数。询问量太大，不好用dfs.]]>
    
    </summary>
    
      <category term="Floyd" scheme="http://tak3ncpp.github.io/tags/Floyd/"/>
    
      <category term="ACM" scheme="http://tak3ncpp.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[喜迎暑假第X场]]></title>
    <link href="http://tak3ncpp.github.io/2015/08/12/%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD%E4%BA%91%E4%BA%91/"/>
    <id>http://tak3ncpp.github.io/2015/08/12/暑期集训云云/</id>
    <published>2015-08-12T03:30:34.000Z</published>
    <updated>2015-08-31T07:59:52.719Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/4922068.jpg" alt=""><a id="more"></a><br>强行无意义配图。</p>
<p>14级集训就这么结束了。喜迎暑期系列和各种专题我都没有AK，于是昨天想把解题报告补了来着，然后做得我<br>想吐（尼玛，不会啊。。。。）= =。嗯，所以就慢慢来吧。。解题报告写了反正也只有自己看，以后基本上<br>都不张贴出来了，一律直接用笔记软件搞成mht,打个包得了。</p>
<h4 id="上学期学的：">上学期学的：</h4><ul>
<li>STL现在也不是很溜，ADT的函数全靠code::blocks提醒</li>
<li>二分三分上个月居然还在写错</li>
<li>并查集，本来就水，我基本上不写按秩合并</li>
<li>简单DP随便学了一下，不好意思，种类背包啥的我还没吃透</li>
<li>最短路，呵呵，会过，现在可能只会写spfa了</li>
<li>最小生成树，都会</li>
<li>树状数组，都会</li>
<li>凸包和最近点对，哈哈哈哈完全没学</li>
<li>kmp，会过</li>
</ul>
<h4 id="集训学的：">集训学的：</h4><ul>
<li>高精度就会写加法乘法，超牛逼大数板子还没用过</li>
<li>matrix67的矩阵10题没弄完</li>
<li>博弈，都会</li>
<li>提到数论。。。我的内心几乎是崩溃的。。。</li>
<li>组合数学的母函数我把它当多重背包理解</li>
<li>字典树简单应用随手套板子，要我+dp、+dfs我就呵呵了。</li>
<li>RMQ算法不难，应用颇难，还是考思维</li>
<li>我的线段树不够犀利，只会模板题</li>
<li>LCA的倍增算法我还没去膜拜，tarjan倒是挺优美的</li>
<li>二分图需要神建模</li>
<li>网络流需要更神的建模，鉴于效率问题我要和优美的dinic说白白了</li>
<li>树dp我还没看</li>
</ul>
<p>敲代码快一年了，基本上还是啥都不会 。啥都别想，变强吧，少年。</p>
<p><em>*EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/4922068.jpg" alt="">]]>
    
    </summary>
    
      <category term="瞎逼逼" scheme="http://tak3ncpp.github.io/tags/%E7%9E%8E%E9%80%BC%E9%80%BC/"/>
    
      <category term="瞎扯" scheme="http://tak3ncpp.github.io/categories/%E7%9E%8E%E6%89%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基础博弈]]></title>
    <link href="http://tak3ncpp.github.io/2015/08/04/%E5%9F%BA%E7%A1%80%E5%8D%9A%E5%BC%88/"/>
    <id>http://tak3ncpp.github.io/2015/08/04/基础博弈/</id>
    <published>2015-08-04T07:30:34.000Z</published>
    <updated>2015-08-31T12:54:37.409Z</updated>
    <content type="html"><![CDATA[<p>今天好好反省自己的博弈方面的欠缺。<br><a href="http://www.cnblogs.com/kuangbin/archive/2011/08/28/2156426.html" target="_blank" rel="external">这个博客</a>讲解博弈比较全面。  <a id="more"></a> </p>
<p>（一）巴什博奕（Bash Game）：只有一堆n个物品，两个人轮流从这堆物品中取物，规定每次至少取一个，最多取m个。最后取光者得胜。<br>ans:保持给对手留下（m+1）的倍数，就能最后获胜。</p>
<p>巴什博奕例题：<br>HDU 1846/2188</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">puts</span>(n%(m+<span class="number">1</span>)?<span class="string">"first"</span>:<span class="string">"second"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">puts</span>(n%(m+<span class="number">1</span>)?<span class="string">"Grass"</span>:<span class="string">"Rabbit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>hdu 2149</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m%(n+<span class="number">1</span>)==<span class="number">0</span>&amp;&amp;n&lt;m)<span class="built_in">puts</span>(<span class="string">"none"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n&gt;=m)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&lt;=n;i++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,i,<span class="string">" \n"</span>[i==n]);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,m%(n+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>变相巴什博奕：<br>HDU 1517/POJ 2505<br>起点：1<br>操作：乘 [2-9]中的一个数<br>情况分界：1-9  -9X2  - 9X2X9 ……..<br>先者掌握奇数局面  ，后者掌握偶数局面。 </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;n)</span><br><span class="line">            c*=<span class="number">18</span>;</span><br><span class="line">        c/=<span class="number">18</span>;</span><br><span class="line">        <span class="keyword">if</span>(c*<span class="number">9</span>&lt;n)<span class="built_in">puts</span>(<span class="string">"Ollie wins."</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Stan wins."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（二）威佐夫博奕（Wythoff Game）：有两堆各若干个物品，两个人轮流从某一堆或同时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜。<br>ans:面对非奇异局势，先拿者必胜；反之，则后拿者取胜。<br>奇异局势：ak =[k（1+√5）/2]，bk= ak + k  （k=0，1，2，…,n 方括号表示取整函数) </p>
<p>HDU 1527</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">double</span> k=(<span class="number">1</span>+<span class="built_in">sqrt</span>(<span class="number">5.0</span>))/<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;m)swap(n,m);</span><br><span class="line">        <span class="keyword">int</span> ans=(<span class="keyword">int</span>)(k*(m-n));</span><br><span class="line">        <span class="keyword">if</span>(n==ans)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（三）尼姆博奕（Nimm Game）：有三堆各若干个物品，两个人轮流从某一堆取任意多的物品，规定每次至少取一个，多者不限，最后取光者得胜。<br>ans：<br>取火柴的游戏<br>题目1：今有若干堆火柴，两人依次从中拿取，规定每次只能从一堆中取若干根，<br>可将一堆全取走，但不可不取，最后取完者为胜，求必胜的方法。<br>题目2：今有若干堆火柴，两人依次从中拿取，规定每次只能从一堆中取若干根，<br>可将一堆全取走，但不可不取，最后取完者为负，求必胜的方法。<br>题目1例题（Nim博弈）：<br>HDU 1849  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> tp;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tp);</span><br><span class="line">            ans^=tp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(ans?<span class="string">"Rabbit Win!"</span>:<span class="string">"Grass Win!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>求可胜操作数，用ans^a[i]得到除a[i]以外的其他值的亦或值，若该值比a[i]小，那么可另a[i]等于该值，使亦或总值等于0.<br>HDU 1850</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000002</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">            ans^=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>((a[i]^ans)&lt;a[i])cnt++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>hdu 2176(同1850）</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200003</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> res)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>((a[i]^res)&lt;a[i])<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,a[i],a[i]^res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            res^=a[i];</span><br><span class="line">        <span class="keyword">if</span>(res)&#123;<span class="built_in">puts</span>(<span class="string">"Yes"</span>);getans(n,res);&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>题目2例题 （反向Nim博弈）：<br> HDU 1907</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> t1=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tp;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tp);</span><br><span class="line">            <span class="keyword">if</span>(tp==<span class="number">1</span>)t1++;</span><br><span class="line">            sum^=tp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">0</span>&amp;&amp;t1!=n||sum!=<span class="number">0</span>&amp;&amp;t1==n)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Brother"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"John"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>hdu 2509</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tp;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> s1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tp);</span><br><span class="line">            sum^=tp;</span><br><span class="line">            <span class="keyword">if</span>(tp==<span class="number">1</span>)s1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">0</span>&amp;&amp;s1!=n||sum!=<span class="number">0</span>&amp;&amp;s1==n)<span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>S-Nim<br>sg博弈+nim博弈  </p>
<p>证明该解法的正确性：<br>对于每个队列的sg值k，显然至少从0——k-1的值在后继点中是可以找到的，那么对手选择这0——k-1个后继点，都将导致总亦或值不为0（即Nim博弈的模型），若选择大于k的后继点（如果有的话），当然也是自取灭亡。假如对手选取的点为p（p&gt;k)，那么新产生的所有队列亦或值肯定不为0，只是把修改的队列抬高了而已（对于新的队列，他的后继点至少可以取到1——p-1的所有值）  </p>
<p>HDU 1536/1944</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf <span class="number">0x3f3f3f3f</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">101</span>],k;</span><br><span class="line"><span class="keyword">int</span> mmr[<span class="number">10003</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sg</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mmr[n]!=-<span class="number">1</span>)<span class="keyword">return</span> mmr[n];</span><br><span class="line">    <span class="keyword">bool</span> vis[<span class="number">101</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k&amp;&amp;n-a[i]&gt;=<span class="number">0</span>;i++)</span><br><span class="line">        vis[sg(n-a[i])]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;;i++)</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])<span class="keyword">return</span> mmr[n]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k),k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">            sort(a,a+k);</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">        mem(mmr,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">            <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="keyword">int</span> l;</span><br><span class="line">                  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l);</span><br><span class="line">                  ans^=sg(l);</span><br><span class="line">              &#125;</span><br><span class="line">            <span class="keyword">if</span>(ans)<span class="built_in">printf</span>(<span class="string">"W"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"L"</span>);</span><br><span class="line">            <span class="keyword">if</span>(i==t-<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HDU 1848</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf <span class="number">0x3f3f3f3f</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> fb[<span class="number">300</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gtfb</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    fb[<span class="number">1</span>]=<span class="number">1</span>,fb[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">3</span>;fb[i-<span class="number">1</span>]&lt;=<span class="number">1000</span>;i++)</span><br><span class="line">        fb[i]=fb[i-<span class="number">1</span>]+fb[i-<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sg[<span class="number">1004</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gtsg</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sg[n]!=-<span class="number">1</span>)<span class="keyword">return</span> sg[n];</span><br><span class="line">    <span class="keyword">bool</span> vis[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;n-fb[i]&gt;=<span class="number">0</span>;i++)</span><br><span class="line">        vis[gtsg(n-fb[i])]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;;i++)</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])<span class="keyword">return</span> sg[n]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    gtfb();</span><br><span class="line">    mem(sg,-<span class="number">1</span>);</span><br><span class="line">    sg[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a[<span class="number">0</span>],&amp;a[<span class="number">1</span>],&amp;a[<span class="number">2</span>]),a[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">            ans^=gtsg(a[i]);</span><br><span class="line">        <span class="built_in">puts</span>(ans?<span class="string">"Fibo"</span>:<span class="string">"Nacci"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么SG博弈是个啥？<br>对于一个博弈问题，它的下一状态（后继点）只能推到有限个子状态中，那么它就是满足SG博弈的。所以Nim博弈就是一种特殊的SG博弈。<br>SG值：一个点的SG值就是一个不等于它的后继点的SG的且大于等于零的最小整数。<br>后继点：也就是按照题目要求的走法（比如取石子可以取的数量，方法）能够走一步达到的那个点。  </p>
<p>sg (X)= min｛n| n∈N ,n≠ for y∈F(x)｝ 就是指x状态下做出决策不能达到的最小状态, sg(x)=0时为必败态.<br> 性质：<br>（1）对于任意的局面，如果它的SG 值为0，那么它的任何一个后继局面的SG 值不为0；<br>（2）对于任意的局面，如果它的SG 值不为0，那么它一定有一个后继局面的SG 值为0。  </p>
<p>例题 HDU 1847:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf <span class="number">0x3f3f3f3f</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> sg[<span class="number">1003</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsg</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sg[n]!=-<span class="number">1</span>)<span class="keyword">return</span> sg[n];</span><br><span class="line">    <span class="keyword">bool</span> vis[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i*=<span class="number">2</span>)</span><br><span class="line">        vis[getsg(n-i)]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;;i++)</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])<span class="keyword">return</span> sg[n]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    mem(sg,-<span class="number">1</span>);</span><br><span class="line">    sg[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">        <span class="built_in">puts</span>(getsg(n)?<span class="string">"Kiki"</span>:<span class="string">"Cici"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HDU 1404<br>用dfs模拟推理过程是一个机智的博弈解决方法。<br>这个题说明，在不需要加类似Nim博弈的场合，sg值的作用只有两种，0和非0.  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn <span class="number">1000002</span></span></span><br><span class="line"><span class="keyword">int</span> sg[maxn];</span><br><span class="line"><span class="comment">///sg博弈，给最多6位数字，问胜负情况。</span></span><br><span class="line"><span class="comment">///两种操作：任意位数字减去一个小于它的正整数值；拿走为0的某位以及其后面的所有数。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sg[n]!=-<span class="number">1</span>)<span class="keyword">return</span> sg[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i*=<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=n;</span><br><span class="line">        <span class="keyword">if</span>(n/i%<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                t-=i;</span><br><span class="line">                <span class="keyword">if</span>(t&lt;i)<span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">///避免首位减为0的操作</span></span><br><span class="line">                <span class="keyword">if</span>(!dfs(t))<span class="keyword">return</span> sg[n]=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">while</span>(t/i%<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!dfs(n/i/<span class="number">10</span>))<span class="keyword">return</span> sg[n]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">///如果该位为0，那么拿走该位以及其后的状态是0,则拿走</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sg[n]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(sg,-<span class="number">1</span>,<span class="keyword">sizeof</span>(sg));</span><br><span class="line">    sg[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=maxn-<span class="number">1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        dfs(i);</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'0'</span>)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sscanf</span>(s,<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">            <span class="keyword">if</span>(sg[n])<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拓展：翻硬币游戏，Anti-sg游戏，无向图删边游戏  </p>
<p><em>EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天好好反省自己的博弈方面的欠缺。<br><a href="http://www.cnblogs.com/kuangbin/archive/2011/08/28/2156426.html">这个博客</a>讲解博弈比较全面。]]>
    
    </summary>
    
      <category term="专题" scheme="http://tak3ncpp.github.io/tags/%E4%B8%93%E9%A2%98/"/>
    
      <category term="博弈" scheme="http://tak3ncpp.github.io/tags/%E5%8D%9A%E5%BC%88/"/>
    
      <category term="ACM" scheme="http://tak3ncpp.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基础数据离散化]]></title>
    <link href="http://tak3ncpp.github.io/2015/07/25/%E7%A6%BB%E6%95%A3%E5%8C%96%E4%B8%93%E9%A2%98/"/>
    <id>http://tak3ncpp.github.io/2015/07/25/离散化专题/</id>
    <published>2015-07-25T02:17:16.000Z</published>
    <updated>2015-08-31T12:05:57.457Z</updated>
    <content type="html"><![CDATA[<h2 id="大量数据离散化处理">大量数据离散化处理</h2><p>需要注意的是，这里的离散化指的是把无限空间中有限的个体映射到有限的空间中去，以此提高算法的时空效率。当然在程序实现上，个体也不可能是无限的。<a id="more"></a><br>这里分两种情况讨论，对于无重数组和有重数组。</p>
<h3 id="无重离散化">无重离散化</h3><p>无重离散化的局限性在于在排序的时候对于相同数值的数据会给出不同rank,导致离散化失效，好处在于它写法简洁。产生的b数组对解题有有一定和帮助。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="keyword">int</span> b[maxn],r[maxn],n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[x]&lt;a[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">discrete</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    sort(b,b+n,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        r[b[i]]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="有重离散化">有重离散化</h3><p>有重离散化的时间效率不及无重离散化的地方在于lower_bound()的二分查找。空间效率的复杂度由于cpy数组的引入而增高。可以顺便建立个index数组来索引。</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typedef long long ll;</span><br><span class="line">ll a[maxn],cpy[maxn],<span class="keyword">index</span>[maxn];</span><br><span class="line">int r[maxn],n;</span><br><span class="line">void discrete()</span><br><span class="line"><span class="comment">&#123;</span><br><span class="line">    mec(cpy,a);</span><br><span class="line">    sort(cpy,cpy+n);</span><br><span class="line">    int tot=unique(cpy,cpy+n)-cpy;</span><br><span class="line">    for(int i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        r[i]=lower_bound(cpy,cpy+tot,a[i])-cpy;</span><br><span class="line">        index[r[i]]=a[i];</span><br><span class="line">    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单个大值数据离散化处理">单个大值数据离散化处理</h2><p>离散数学高深莫测，在此我仅逼逼一些皮毛。对于整块的连续数据，可以通过把其拆分成多个数据段，对于不同的运算需求可以选择不同的拆分方式来简化运算是离散化的目的。在程序设计中，常见的离散化方法是按照二进制来处理数据。</p>
<h3 id="树状数组">树状数组</h3><p>树状数组是针对于一个数组数据的和的数据结构。基本思想就是把一个大的数据(前i个数据和）按照二进制高度(最低位1所在位置）打包储存在i之前的数据中。<br>把大块数据离散地储存在一个树状数组的结构中可批量更新区间数据，查询单点数据。</p>
<p>树状数组由于它的特殊性质，对于维护整段数值的同一个性质（比如最值）表现良好。详见<a href="http://codeforces.com/problemset/problem/486/E" target="_blank" rel="external">cf486E</a>。注意，这里是从初始位置到询问位置的性质，对于起点不定的区间，线段树显然更加优越。(比较可见 HDU 1754.)<br><em>PS：<br>线段树也是一种利用二进制处理数据的类型结构，但它用到的思想不是离散化，在此我暂且不深度挖掘。</em></p>
<p>于是让我们利用树状数组维护最大值来做一发最长上升子序列<a href="http://poj.org/problem?id=2533" target="_blank" rel="external">poj 2533</a>。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug puts(<span class="string">"--------"</span>)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mx <span class="number">100050</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mem(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="keyword">int</span> c[mx];</span><br><span class="line"><span class="keyword">int</span> f[mx],b[mx],sum[mx];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[mx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lb</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumf</span><span class="params">(<span class="keyword">int</span> x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=max(ans,c[x]);</span><br><span class="line">        x-=lb(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumb</span><span class="params">(<span class="keyword">int</span> x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;mx)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=max(ans,c[x]);</span><br><span class="line">        x+=lb(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updatef</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;mx)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i]=max(c[i],x);</span><br><span class="line">        i+=lb(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateb</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i]=max(c[i],x);</span><br><span class="line">        i-=lb(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">    mem(c,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]+=<span class="number">2</span>;</span><br><span class="line">        f[i]=sumf(a[i]-<span class="number">1</span>);</span><br><span class="line">        updatef(a[i],f[i]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mem(c,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i]=sumb(a[i]+<span class="number">1</span>);</span><br><span class="line">        updateb(a[i],b[i]+<span class="number">1</span>);</span><br><span class="line">        sum[i]=b[i]+f[i];</span><br><span class="line">        len=max(sum[i],len);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,len+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对，就是这样做的。c数组储存的是值为i的数对应的前缀LIS长度，以及后来用来储存后缀LIS长度，然后求和找最大值。很容易看出其局限性，只能从固定起点开始搜索，比如类似前缀后缀的问题，线段树对这个局限性有很好的解决。</p>
<h3 id="快速运算法">快速运算法</h3><p>对于快速运算法，之所以在原运算上得到了优化，在于这些运算把原来整块数据按照二进制进行了拆分，对于有值的数据段进行运算，无值的数据段进行平移。常用的有快速幂，快速模，快速乘法，矩阵快速幂等，都是很经典的按照二进制拆分优化。贴模板不是我想做的，上述算法大家想必也十分熟悉。<br>啊，还是来两发吧。</p>
<p>矩阵快速幂</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">struct <span class="keyword">matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[arr_size][arr_size];</span><br><span class="line">    <span class="keyword">int</span> r,c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">matrix</span> multi(<span class="keyword">matrix</span> a,<span class="keyword">matrix</span> b)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">matrix</span> c;</span><br><span class="line">    mem(c.arr,<span class="number">0</span>);</span><br><span class="line">    c.r=a.r;</span><br><span class="line">    c.c=b.c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a.r;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b.c;j++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=a.c;k++)</span><br><span class="line">        c.arr[i][j]=(c.arr[i][j]+a.arr[i][k]<span class="variable">%mod</span><span class="variable">*b</span>.arr[k][j]<span class="variable">%mod</span>)<span class="variable">%mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">matrix</span> qpow(<span class="keyword">matrix</span> a,<span class="keyword">int</span> k)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">matrix</span> res;</span><br><span class="line">    init(res);</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)res=multi(res,a);</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a=multi(a,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>给出的矩阵乘法是普适乘法，所以在初始化的时候注意r,c的初始化。然而在快速幂实现的时候，矩阵一定是正方矩阵，所以可以进行优化。</p>
<p>快速乘法+快速幂</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">qmult</span><span class="params">(ll a,ll b)</span><span class="comment">//ORZ</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a*b-(ll)(a/(<span class="keyword">long</span> <span class="keyword">double</span>)M*b+<span class="number">1e-3</span>)*M+M)%M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qmulti</span><span class="params">(ll a,ll b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    a%=M;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=(res+a)%M;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a=(a+a)%M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ret=<span class="number">1</span>;</span><br><span class="line">    a%=M;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=qmulti(a,a)%M)</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">        ret=qmulti(ret,a)%M;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>快速乘法是个很着急的玩意儿，慎用。使用于处理mod长整型变量的场合。</p>
<p><em>*EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="大量数据离散化处理">大量数据离散化处理</h2><p>需要注意的是，这里的离散化指的是把无限空间中有限的个体映射到有限的空间中去，以此提高算法的时空效率。当然在程序实现上，个体也不可能是无限的。]]>
    
    </summary>
    
      <category term="快速运算" scheme="http://tak3ncpp.github.io/tags/%E5%BF%AB%E9%80%9F%E8%BF%90%E7%AE%97/"/>
    
      <category term="离散化" scheme="http://tak3ncpp.github.io/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
      <category term="ACM" scheme="http://tak3ncpp.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 2719]]></title>
    <link href="http://tak3ncpp.github.io/2015/07/11/poj%202719/"/>
    <id>http://tak3ncpp.github.io/2015/07/11/poj 2719/</id>
    <published>2015-07-11T02:17:16.000Z</published>
    <updated>2015-08-31T08:03:31.946Z</updated>
    <content type="html"><![CDATA[<p>给一些数，这些数遇到4就跳过。比如5表示的值是4.问原数是多少。 <a id="more"></a><br>换成9进制。<br>遇4跳过换成遇9跳过。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> n[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,n)&amp;&amp;n[<span class="number">0</span>]!=<span class="string">'0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s: "</span>,n);</span><br><span class="line">        <span class="keyword">char</span> *temp;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            <span class="keyword">if</span>(n[i]&gt;=<span class="string">'4'</span>)n[i]--;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a=strtol(n,&amp;temp,<span class="number">9</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a);</span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><em>*EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[给一些数，这些数遇到4就跳过。比如5表示的值是4.问原数是多少。]]>
    
    </summary>
    
      <category term="机智题" scheme="http://tak3ncpp.github.io/tags/%E6%9C%BA%E6%99%BA%E9%A2%98/"/>
    
      <category term="ACM" scheme="http://tak3ncpp.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[瞎扯]]></title>
    <link href="http://tak3ncpp.github.io/2015/07/08/%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>http://tak3ncpp.github.io/2015/07/08/第一篇/</id>
    <published>2015-07-08T11:30:16.000Z</published>
    <updated>2015-08-22T07:58:54.745Z</updated>
    <content type="html"><![CDATA[<p>今天突然觉得有必要搭个博客，就参考了一下队友的经验，用hexo水了这么个东西。<br>以后用来存点儿题解和其他。<a id="more"></a></p>
<h3 id="下面就随便扯点儿，用来试一下部分功能。"><strong>下面就随便扯点儿，用来试一下部分功能。</strong></h3><p>下次打算用WordPress搭一个，没有为什么。今天搭这玩意儿也是考虑到过两天要被要求出题解，所以瞎整了一个。我的HTML学龄是40分钟，这篇文章也是用word写的。对，我就是个弱逼。= =。</p>
<p>以后这篇文用来记录处理遇到博客搭建过程中遇到的问题好了。</p>
<p><em>2015/7/9 在about界面加评论功能：在source目录下以HTML格式进行修改，并以HTML格式上传（强行加评论功能(๑•̀ㅂ•́)و✧），但无论用md文件还是HTML，hexo会根据主题自动生成格式。</em></p>
<p><em>*EOF</em></p>
]]></content>
    <summary type="html">
    <![CDATA[水了个博客。]]>
    
    </summary>
    
      <category term="hexo" scheme="http://tak3ncpp.github.io/tags/hexo/"/>
    
      <category term="瞎逼逼" scheme="http://tak3ncpp.github.io/tags/%E7%9E%8E%E9%80%BC%E9%80%BC/"/>
    
      <category term="瞎扯" scheme="http://tak3ncpp.github.io/categories/%E7%9E%8E%E6%89%AF/"/>
    
  </entry>
  
</feed>
